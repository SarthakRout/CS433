   tc->P = num_threads;
    for(int i = 0; i<tc->P; i++){
        tc->ctr[i] = 0;
        tc->ctr2[i] = 0;
        pthread_mutex_init(&(tc->lock[i]), NULL);
        pthread_cond_init(&(tc->cv1[i]), NULL);
        pthread_cond_init(&(tc->cv2[i]), NULL);
    } 
    unsigned int i, mask;
    for(i =0, mask = 1; (mask & tid) !=0; ++i, mask <<= 1){
        pthread_mutex_lock(&(tc->lock[tid]));
        cout<<"Locked: "<<tid<<"\n"<<flush;
        tc->ctr[tid]++;
        pthread_cond_wait(&(tc->cv1[tid]), &(tc->lock[tid]));
        cout<<"Unlocked: "<<tid<<"\n"<<flush;
        pthread_mutex_unlock(&(tc->lock[tid]));
    }
    if(tid < tc->P - 1){
        while(tc->ctr[tid + mask] <= 0);
        pthread_mutex_lock(&(tc->lock[tid+mask]));
        tc->ctr[tid+mask]--;
        pthread_mutex_unlock(&(tc->lock[tid+mask]));
        pthread_cond_signal(&(tc->cv1[tid + mask]));
        pthread_mutex_lock(&(tc->lock[tid]));
        cout<<mask<<"\n"<<flush;
        tc->ctr2[tid]++;
        cout<<"Locked: "<<tid<<"\n"<<flush;
        pthread_cond_wait(&(tc->cv2[tid]), &(tc->lock[tid]));
        cout<<"Unlocked: "<<tid<<"\n"<<flush;
        pthread_mutex_unlock(&(tc->lock[tid]));
    }
    for(mask >>=1; mask > 0; mask>>=1) {
        while(tc->ctr2[tid-mask] != 1);
        pthread_cond_signal(&(tc->cv2[tid-mask]));
        pthread_mutex_lock(&(tc->lock[tid-mask]));
        tc->ctr2[tid-mask]--;
        assert(tc->ctr2[tid-mask] == 0);
        pthread_mutex_unlock(&(tc->lock[tid-mask]));
    }